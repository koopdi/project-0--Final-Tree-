void draw(GWindow& window)
Draws the tile on the passed in window at its x, y position, at its width and height and in its color
You can change the color of all future drawing on the window by calling the GWindow member function
setFillColor(color) and passing it a string representing the color. Draw a rectangle on a window by calling the
GWindow member function fillRect(x,y, width, height).
For example, if you wanted to draw a red rectangle at an x of 10, y of 30 that was 100 wide and 150 tall on a GWindow
named window you could write:
window.setFillColor("red");
window.fillRect(10, 30, 100, 150);

void print()
Prints out a text representation of the tile in the following format:
x = xValue, y = yValue, width = widthValue, height = heightValue, color = colorValue
For example, a red rectangle at an x of 10, y of 30 that was 100 wide and 150 tall would print as:
x = 10, y = 30, width = 100, height = 150, color = red

void highlight(int x, int y, GWindow& window)
Called when the user clicks and the highlight radio button is selected.  TileMain passes the x/y coordinates the user
clicked on and the window. If these coordinates touch any tiles, you should draw width 10 yellow border around the
topmost of these tiles.
Set the border color to yellow with the GWindow member function setColor(color). Change the line thickness to 10
with the GWindow member function setLineWidth(width). Draw the border with the GWindow member function
drawRect(x, y, width, height).
For example, if you wanted to draw an 8 wide blue border around a rectangle at an x of 10, y of 30 that was 100 wide and
150 tall on a GWindow* named window you could write:
Window.setColor("blue");
Window.setLineWidth(8);
Window.drawRect(6, 26, 108, 158);
Notice that the coordinates are not quite the same as the rectangle the border is surrounding. They are Â½ the border thickness
higher and to the left and the border thickness more wide and tall. If you draw the border at exactly the same place the
rectangle will overlap with part of it.